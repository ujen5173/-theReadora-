generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum StoryStatus {
    DRAFT
    PUBLISHED
    DELETED
    PRIVATE
    SCHEDULED
}

enum PurchaseMedium {
    STRIPE
    ESEWA
    KHALTI
    IMEPAY
}

enum TransactionType {
    PURCHASE
    CHAPTER_UNLOCK
    MONTHLY_BONUS
    REFERRAL_BONUS
    SUBSCRIPTION
    SUBSCRIPTION_ENDED
}

enum AccountStatus {
    ACTIVE
    BANNED
    DELETED
}

enum Language {
    English
    Spanish
    French
    German
    Italian
    Portuguese
    Russian
    Chinese
    Japanese
    Korean
}

enum ChapterPricePool {
    POOL_50
    POOL_70
    POOL_110
    POOL_150
}

model User {
    id            String    @id @default(cuid())
    name          String
    username      String    @unique
    email         String    @unique
    bio           String?
    emailVerified DateTime?
    image         String?

    coins            Int      @default(0)
    coinsLastUpdated DateTime @default(now())

    premium            Boolean         @default(false)
    premiumUntil       DateTime?
    premiumSince       DateTime?
    premiumPurchasedAt DateTime?
    purchaseMedium     PurchaseMedium?
    purchaseId         String?

    transactionHistory Transactions[]

    accounts Account[]
    sessions Session[]
    stories  Story[]

    followingCount Int @default(0)
    followersCount Int @default(0)

    usedForAIContentGeneration Boolean? @default(false)

    followers Follow[] @relation("Follower")
    following Follow[] @relation("Following")

    readinglist Readinglist[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accountStatus AccountStatus @default(ACTIVE)

    unlockedChapters UnlockedChapter[]

    storyRatings Rating[]

    replies Replies[]
    // Removed unused repliesId field

    likedReplies Replies[] @relation("ReplyLikes") // Fixed relation name
    likedRatings Rating[]  @relation("RatingLikes")

    @@index([username, email])
    @@index([accountStatus])
    @@index([premium])
}

model UnlockedChapter {
    id        String  @id @default(cuid())
    userId    String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    chapterId String
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    price ChapterPricePool

    @@unique([userId, chapterId])
    @@index([userId])
    @@index([chapterId])
    @@map("unlocked_chapters")
}

model Transactions {
    id                     String          @id @default(cuid())
    userId                 String
    user                   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    type                   TransactionType @default(PURCHASE)
    amount                 Int
    price                  String
    time                   String
    status                 String
    pre_transaction_coins  Int
    post_transaction_coins Int
    metadata               Json?
    createdAt              DateTime        @default(now())

    @@index([userId, createdAt])
    @@index([type, status])
}

model Follow {
    id          String @id @default(cuid())
    follower    User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
    followerId  String
    following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
    followingId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([followerId, followingId])
}

model Rating {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    storyId   String
    story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
    rating    Int
    review    String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    replies Replies[]

    likes      User[] @relation("RatingLikes")
    likesCount Int    @default(0)

    @@unique([userId, storyId])
    @@index([userId, storyId])
    @@index([storyId, rating])
    @@index([createdAt])
}

model Replies {
    id         String @id @default(cuid())
    userId     String
    user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    ratingId   String
    rating     Rating @relation(fields: [ratingId], references: [id], onDelete: Cascade)
    reply      String
    likesCount Int    @default(0)
    likes      User[] @relation("ReplyLikes") // Fixed relation name

    parentId String?
    parent   Replies? @relation("RepliesChildren", fields: [parentId], references: [id], onDelete: Cascade)

    children Replies[] @relation("RepliesChildren")

    createdAt DateTime @default(now())

    @@index([userId])
    @@index([ratingId])
    @@index([parentId])
    @@index([createdAt])
}

model ChapterRead {
    id        String   @id @default(uuid())
    chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    chapterId String
    readerKey String
    frequency Int      @default(1)
    lastRead  DateTime @default(now())
    readTime  Int      @default(0)
    createdAt DateTime @default(now())

    @@unique([chapterId, readerKey])
    @@index([readerKey])
    @@map("chapter_reads")
}

model Story {
    id             String      @id @default(cuid())
    title          String
    slug           String      @unique
    synopsis       String
    readingTime    Int
    readCount      Int         @default(0)
    thumbnail      String
    thumbnailId    String
    tags           String[]
    isMature       Boolean     @default(false)
    storyStatus    StoryStatus @default(DRAFT)
    isCompleted    Boolean     @default(false)
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt
    hasAiContent   Boolean     @default(false)
    language       Language    @default(English)
    isLGBTQContent Boolean     @default(false)
    ratingCount    Int         @default(0)
    averageRating  Float       @default(0.0)

    ratings Rating[]

    genreSlug String
    genre     Genres @relation("StoryGenres", fields: [genreSlug], references: [slug], onDelete: Cascade)

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    chapterCount Int       @default(0)
    chapters     Chapter[]

    readinglists ReadinglistStory[]

    @@index([title, slug, tags], name: "story_index")
    @@index([storyStatus, isCompleted])
    @@index([authorId])
    @@index([genreSlug])
    @@index([createdAt])
}

model Chapter {
    id            String @id @default(cuid())
    chapterNumber Int
    title         String
    slug          String

    metrics Json @default("{\"wordCount\": 0, \"readingTime\": 0, \"likesCount\": 0, \"commentsCount\": 0, \"ratingCount\": 0, \"ratingValue\": 0, \"averageRating\": 0}")

    readershipAnalytics Json @default("{\"total\": 0, \"unique\": 0}")

    storyId String
    story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

    mongoContentID String[]

    reader ChapterRead[]

    isLocked Boolean           @default(false)
    price    ChapterPricePool?

    unlockedUsers UnlockedChapter[]

    scheduledFor DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([storyId, chapterNumber])
    @@index([title, storyId], name: "chapter_index")
    @@index([isLocked])
    @@index([scheduledFor])
    @@index([createdAt])
}

model Genres {
    id           String   @id @default(cuid())
    name         String   @unique
    slug         String   @unique
    stories      Story[]  @relation("StoryGenres")
    createdAt    DateTime @default(now())
    totalStories Int      @default(0)
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Readinglist {
    id          String   @id @default(cuid())
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    createdAt   DateTime @default(now())
    title       String
    description String?

    isPrivate Boolean @default(false)

    stories ReadinglistStory[]

    @@index([userId])
    @@map("readinglist")
}

model ReadinglistStory {
    id            String      @id @default(cuid())
    readinglist   Readinglist @relation(fields: [readinglistId], references: [id], onDelete: Cascade)
    readinglistId String
    story         Story       @relation(fields: [storyId], references: [id], onDelete: Cascade)
    storyId       String

    @@unique([readinglistId, storyId])
}
