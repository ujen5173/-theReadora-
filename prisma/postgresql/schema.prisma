generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enum for story status
enum StoryStatus {
    DRAFT
    PUBLISHED
    DELETED
    PRIVATE
}

model User {
    id            String    @id @default(cuid())
    name          String
    username      String
    email         String    @unique
    bio           String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    stories       Story[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Language {
    English
    Spanish
    French
    German
    Italian
    Portuguese
    Russian
    Chinese
    Japanese
    Korean
}

model ChapterRead {
    id        String   @id @default(uuid())
    chapter   Chapter  @relation(fields: [chapterId], references: [id])
    chapterId String
    readerKey String // e.g. userId for logged-in and for anonymous
    frequency Int      @default(1) // how many times the chapter is read
    lastRead  DateTime @default(now()) // last read time
    readTime  Int      @default(0) // time spent reading in seconds
    createdAt DateTime @default(now())
    // userSessionId String? // for anonymous users, we can use a session ID to track reads

    @@unique([chapterId, readerKey])
    @@map("chapter_reads")
}

model Story {
    id             String      @id @default(cuid())
    title          String
    slug           String      @unique
    synopsis       String
    // readCount will be incremented by using cronjob. this will be calcaulated after every 24 hours
    readCount      Int         @default(0)
    votes          Int         @default(0)
    readingTime    Int
    thumbnail      String
    thumbnailId    String
    tags           String[]
    isMature       Boolean     @default(false)
    storyStatus    StoryStatus @default(DRAFT)
    isCompleted    Boolean     @default(false)
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt
    hasAiContent   Boolean     @default(false)
    language       Language    @default(English)
    isLGBTQContent Boolean     @default(false)

    genreSlug String
    genre     Genres @relation("StoryGenres", fields: [genreSlug], references: [slug])

    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    chapterCount Int       @default(0)
    chapters     Chapter[]

    @@index([title, slug, tags], name: "story_index")
}

model Chapter {
    id            String @id @default(cuid())
    chapterNumber Int
    title         String
    slug          String

    // Metrics data for the chapter including engagement and reading statistics
    metrics Json @default("{\"wordCount\": 0, \"readingTime\": 0, \"likesCount\": 0, \"commentsCount\": 0, \"sharesCount\": 0, \"ratingCount\": 0, \"ratingValue\": 0, \"ratingAvg\": 0}")

    readershipAnalytics Json @default("{\"total\": 0, \"unique\": 0, \"average\": 0}")

    storyId String
    story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

    mongoContentID String[] // multple mongo document if the chapter is split due to size

    reader ChapterRead[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([title, storyId], name: "chapter_index")
}

model Genres {
    id           String   @id @default(cuid())
    name         String   @unique
    slug         String   @unique
    stories      Story[]  @relation("StoryGenres")
    createdAt    DateTime @default(now())
    totalStories Int      @default(0)
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
